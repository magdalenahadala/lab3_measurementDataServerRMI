package server;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

public class Servant 
  extends UnicastRemoteObject 
  implements Interface {
	private Map<String, ICallback> obecni = new HashMap<String, ICallback>();
	private Map<String, TimeHistory> THmap = new HashMap<String, TimeHistory>();
	private Map<String, Spectrum> Smap = new HashMap<String, Spectrum>();
	
  public Servant() throws RemoteException {
  }  

 //Metoda implementujaca funkcje komunikuj() interfejsu
  public boolean komunikuj(String nick, String text) throws RemoteException {
	    System.out.println("Server.komunikuj(): " + text);
	    ICallback callback = obecni.get(nick);
	    if(callback != null) {
	    	callback.komunikuj(nick, text);
			return true;
	    }
	    return false;
	  }
  
  //Metoda implementujaca funkcje zarejestruj() interfejsu
  public boolean zarejestruj(String nick, ICallback n) throws RemoteException {
    System.out.println("Server.zarejestruj(): " + nick);
    if (!obecni.containsKey(nick)) {
      obecni.put(nick, n);
      return true;
    }
    return false;
  }
  //Metoda implementujaca funkcje wyrejestruj() interfejsu
	public boolean wyrejestruj(String nick) throws RemoteException {
		if(obecni.remove(nick) != null) {
			System.out.println("Server.wyrejestruj(): " + nick);
	        return true;
		} 
		return false;
	}
	
	//2 Metody implementujaca funkcje zapisz() interfejsu IChat
	 public boolean zapisz(TimeHistory THdata) throws RemoteException {
	   System.out.println("Server.zapisz(): " + THdata.device);
		if(THdata.device != null) {
			String key = THdata.device + THdata.channelNr;
			THmap.put(key, THdata);
			return true;
		}
	   return false;
	 }
	
	 public boolean zapisz(Spectrum spectre) throws RemoteException {
		   System.out.println("Server.zapisz(): " + spectre.device);
			if(spectre.device != null) {

				String key = spectre.device + spectre.channelNr;
				Smap.put(key, spectre);
				return true;
			}
		   return false;
		 }
	 
//Metoda implementujaca funkcje informuj() interfejsu IChat
	public Vector<String> informuj(String nick) throws RemoteException {
			Set<String> set = obecni.keySet();
			Vector<String> v = new Vector<String>();
			for(String s : set)
				if(s.matches(nick))
					v.add(s);
			return v;
		}
	
	public Vector<String> tHist(String device) throws RemoteException {
		Set<String> set = THmap.keySet();
		Vector<String> v = new Vector<String>();
		for(String s : set)
			if(s.matches(device))
				v.add((s));
		return v;
	}

	public Vector<String> Spectrum(String device) throws RemoteException {
		Set<String> set = Smap.keySet();
		Vector<String> v = new Vector<String>();
		for(String s : set)
			if(s.matches(device))
				v.add(s);
		return v;
	}

	//Metody implementujace funkcje dane() interfejsu
	public Vector<TimeHistory> wypiszTH(String device) throws RemoteException {
		Set<String> set = THmap.keySet();
		Vector<TimeHistory> v = new Vector<TimeHistory>();

		for(String s : set)
			if(s.contains(device))
				v.add(THmap.get(s));
		return v;
		
	}

	public Vector<Spectrum> wypiszS(String device) throws RemoteException {
		Set<String> set = THmap.keySet();
		Vector<Spectrum> v = new Vector<Spectrum>();

		for(String s : set)
			if(s.contains(device))
				v.add(Smap.get(s));
		return v;
		
	}
	

}

